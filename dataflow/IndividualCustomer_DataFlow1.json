{
	"name": "IndividualCustomer_DataFlow1",
	"properties": {
		"folder": {
			"name": "AdventureWorksDataFlows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "CustomerDataDeltaSource"
				}
			],
			"sinks": [
				{
					"name": "IndividualCustomerSink"
				}
			],
			"transformations": [
				{
					"name": "Deduplicated1CustomerDataDeltaSource"
				},
				{
					"name": "CustomerData"
				},
				{
					"name": "SelectCustomerData"
				},
				{
					"name": "IndividualCustomer"
				}
			],
			"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomer\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nSelectCustomerData select(mapColumn(\n\t\tCustomerId = CustomerKey,\n\t\tIndividualCustomerName = Customer\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> IndividualCustomer\nIndividualCustomer sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'IndividualCustomer',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> IndividualCustomerSink"
		}
	}
}