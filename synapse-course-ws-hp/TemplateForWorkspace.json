{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-course-ws-hp"
		},
		"synapse-course-ws-hp-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-course-ws-hp-WorkspaceDefaultSqlServer'"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"ecdc-covid-19-cases_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'ecdc-covid-19-cases'"
		},
		"synapse-course-ws-hp-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecoursedlhp.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ecdc-covid-19-cases')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('ecdc-covid-19-cases_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-ws-hp-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-course-ws-hp-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-ws-hp-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-course-ws-hp-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This sql script file will be used to extract data from nyc taxi csv file.",
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- Read data from a CSV file with header as True\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedlhp.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR ='\\n'\n    )\nWITH\n(\n    LocationID INT,\n    Borough VARCHAR(15),\n    Zone VARCHAR(50),\n    service_zone VARCHAR(15)\n)\n AS [result]\n\n--Create a database named nyc_taxi_discovery\ncreate DATABASE nyc_taxi_discovery;\n\n--Use the data base and set collation for that DB\nUSE nyc_taxi_discovery\n\nALTER DATABASE nyc_taxi_discovery COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n\n--Query the sys.databases table to verify the collation value.\nSELECT NAME,COLLATIOn_NAME FROM sys.databases\n\n--Query to select specific 2 columns from the CSV file.\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedlhp.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR ='\\n'\n    )\nWITH\n(\n    Borough VARCHAR(15),\n    Zone VARCHAR(50)\n)\n AS [result]\n\n--read data from a file without column header\n SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedlhp.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR ='\\n'\n    )\nWITH\n(\n    Borough VARCHAR(15) 2,\n    Zone VARCHAR(50) 3\n)\n AS [result]\n\n --read data from the file with custom header name, also uses the option of skipping rows from data using firstrow option.\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedlhp.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW=2,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR ='\\n'\n    )\nWITH\n(\n    location_id INT 1,\n    borough VARCHAR(15) 2,\n    zone VARCHAR(50) 3,\n    service_zone VARCHAR(15) 4\n)\n AS [result]\n\n CREATE EXTERNAL DATA SOURCE nyc_taxi_data\n WITH(\n    LOCATION='abfss://nyc-taxi-data@synapsecoursedlhp.dfs.core.windows.net/'\n)\n\nDROP EXTERNAL DATA SOURCE nyc_taxi_data\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        data_source='nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW=2,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR ='\\n'\n    )\nWITH\n(\n    location_id INT 1,\n    borough VARCHAR(15) 2,\n    zone VARCHAR(50) 3,\n    service_zone VARCHAR(15) 4\n)\n AS [result]\n\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data_raw\nWITH (\n    LOCATION='abfss://nyc-taxi-data@synapsecoursedlhp.dfs.core.windows.net/raw'\n)\n\n--Using the external data sources to query the data\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        data_source='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW=2,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR ='\\n'\n    )\nWITH\n(\n    location_id INT 1,\n    borough VARCHAR(15) 2,\n    zone VARCHAR(50) 3,\n    service_zone VARCHAR(15) 4\n)\n AS [result]\n\n--Getting the name and location of external data sources\nSELECT name,location FROM sys.external_data_sources\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query JSON files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Scripts"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read JSON files */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.jsonl',\n        FORMAT = 'csv',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b'\n    ) with (doc nvarchar(max)) as rows\ngo\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.json',\n        FORMAT = 'csv',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b' --> You need to override rowterminator to read classic JSON\n    ) WITH (doc nvarchar(max)) as rows\n\n\n/* Books dataset */\n\n/* In order to process JSON files using JSON_VALUE and JSON_QUERY you need to to read json file from storage as single column.\nFollowing script reads book1.json file as single column. */\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-json/books/book1.json',\n        FORMAT='CSV',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(8000)\n    ) AS [r]\n\n/* Querying JSON files using JSON_VALUE */\n\n/*Following query shows how to use JSON_VALUE to retrieve scalar values (title, publisher)\nfrom book with title Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics.*/\nSELECT\n    JSON_VALUE(jsonContent, '$.title') AS title,\n\tJSON_VALUE(jsonContent, '$.publisher') as publisher,\n\tjsonContent\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-json/books/*.json',\n\t\tFORMAT='CSV',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(8000)\n    ) AS [r]\nWHERE\n\tJSON_VALUE(jsonContent, '$.title') = 'Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics'\n\n/* Querying JSON files using JSON_QUERY */\n\n/* Following query shows how to use JSON_QUERY to retrieve objects and arrays (authors)\nfrom book with title Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics. */\n\nSELECT\n    JSON_QUERY(jsonContent, '$.authors') AS authors,\n\tjsonContent\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-json/books/*.json',\n\t\tFORMAT='CSV',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(8000)\n    ) AS [r]\nWHERE\n\tJSON_VALUE(jsonContent, '$.title') = 'Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics'\n\n/* Querying JSON files using OPENJSON */\n\n/* Following query shows how to use OPENJSON to retrieve objects and properties\nwithin book with title Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics. */\n\nSELECT\n\tj.*\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-json/books/*.json',\n\t\tFORMAT='CSV',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent NVARCHAR(4000) --Note that we have to use NVARCHAR(4000) for OPENJSON to work.\n    ) AS [r]\nCROSS APPLY OPENJSON(jsonContent) AS j\nWHERE\n\tJSON_VALUE(jsonContent, '$.title') = 'Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics'\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/demo sql script')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SQL Scripts"
				},
				"content": {
					"query": "Select 100*2;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/set_serverless_cost_control')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"content": {
					"query": "Select * FROM sys.dm_external_data_processed\n\nSELECT * FROM sys.configurations\nWHERE name like 'data processed%'\n\nsp_set_data_processed_limit\n@type=N'daily',\n@limit_tb = 1\n\nsp_set_data_processed_limit\n@type=N'weekly',\n@limit_tb = 1\n\nsp_set_data_processed_limit\n@type=N'monthly',\n@limit_tb = 2",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}